
views.py

class MainSocketHandler(WebSocketHandler):
    def set_default_headers(self):
        print("888")
        # req = self.request.headers.get("Sec-Websocket-Protocol")
        # if req:
        #     self.set_header("Sec-Websocket-Protocol",req)

    async def prepare(self):
        print("2222222222")
        req = self.request.headers.get("Sec-Websocket-Protocol")
        if req:
            self.set_header("Sec-Websocket-Protocol",req)
        else:
            # self.set_status(401)
            return self.finish({"code":403})

    def check_origin(self, origin):
        return True

    async def open(self):
        print("WebSocket opened",self)
        self.settings['soketInfo'].add(self)
        print(len(self.settings['soketInfo']))

    async def on_message(self, message):
        dataFuture = []
        for user in self.settings['soketInfo']:
            dataFuture.append(gen.convert_yielded(user.write_message(u"You said: " + message)))
        msg = gen.multi(dataFuture)
        await msg
        # msg = gen.multi([user.write_message(u"You said: " + message) for user in self.settings['soketInfo'] if user != self])
        # await msg
        # for user in self.settings['soketInfo']:
        #     await user.write_message(u"You said: " + message)

    def on_close(self):
        self.settings['soketInfo'].remove(self)
        print("WebSocket closed")


index.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title></title>
    <style>
    </style>
    <script type="text/javascript">
      //用于填写发送消息的输入框
      var messageBox;
      //用于显示消息的div容器
      var messageLog;
      //WebSocket对象
      var socket;
      var bb = "9999"

      //页面加载完毕
      window.onload = function() {
        messageBox = document.getElementById('messageBox');
        messageLog = document.getElementById('messageLog');
        connect();
      }

      //创建socket对象并绑定所有事件
      function connect() {
        //创建socket对象
        socket = new WebSocket("ws://localhost:8009/mainsocket/",["8433"]);

        //监听所有的Web socket事件
        socket.onopen = connectionOpen;
        socket.onmessage = messageReceived;
        socket.onerror = errorOccurred;
        socket.onclose = connectionClosed;
      }

      //断开连接按钮点击
      function disconnect(){
        socket.close();
      }

      //发送消息按钮点击
      function sendMessage(){
        //获取要发送的数据
        var message = messageBox.value;

        //通过socket发送消息
        socket.send(message);

        //告诉用户刚刚发生了什么
        messageLog.innerHTML += "<br>发送：" + message;
      }

      //连接建立完毕事件响应
      function connectionOpen(e) {
        messageLog.innerHTML += "<br>--- Socket连接成功 ---";
      }

      //消息接收事件响应
      function messageReceived(e){
        messageLog.innerHTML += "<br>收到：" + e.data;
      }

      //错误事件响应
      function errorOccurred(e){
        messageLog.innerHTML += "<br>发生错误：" + e.data;
      }

      //连接关闭事件响应
      function connectionClosed(e) {
          console.log("关闭了")
        messageLog.innerHTML += "<br>--- Socket连接关闭 ---";
      }
    </script>
  </head>
  <body>
    <input id="messageBox" type="text" />
    <button onclick="sendMessage()">发送</button>
    <button onclick="disconnect()">断开</button>
    <div id="messageLog"></div>
  </body>
</html>

